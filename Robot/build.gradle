plugins {
    id 'java'
    id 'edu.wpi.first.GradleRIO' version '2024.3.2'
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'com.github.spotbugs' version '6.0.2'
    id "com.peterabeles.gversion" version "1.10.2"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "frc4488.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    /* jvmArgs.add("-Dcom.sun.management.jmxremote")
                    jvmArgs.add("-Dcom.sun.management.jmxremote.port=9191")
                    jvmArgs.add("-Dcom.sun.management.jmxremote.authenticate=false")
                    jvmArgs.add("-Dcom.sun.management.jmxremote.ssl=false")
                    jvmArgs.add("-Djava.rmi.server.hostname=10.44.88.2")
                    jvmArgs.add("-XX:+HeapDumpOnOutOfMemoryError")
                    jvmArgs.add("-XX:HeapDumpPath=/home/lvuser") */
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testCompileOnly 'junit:junit:4.12'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.1'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion.get()}"

    implementation group: 'gov.nist.math', name: 'jama', version: '1.0.3'
    implementation group: 'commons-io', name: 'commons-io', version: '2.4'
    implementation 'org.java-websocket:Java-WebSocket:1.5.3'
    implementation 'org.msgpack:msgpack-core:0.9.3'
    implementation 'com.google.code.gson:gson:2.10.1'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.9'
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Spotbugs settings
spotbugsMain {
    ignoreFailures = false
    onlyAnalyze = ['frc4488.lib.-', 'frc4488.robot.-']
    excludeFilter = file('spotbugsExclusions.xml')
}

test {
    jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
}

googleJavaFormat {
    toolVersion = '1.18.1'
    exclude "src/main/java/frc4488/robot/BuildConstants.java"
}

assemble.dependsOn(tasks.googleJavaFormat)

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        xml {
            required.set(false)
        }
        html {
            required.set(true)
        }
    }
}

class SetSimulationConfig extends DefaultTask {
    @InputDirectory
    File configDir

    SetSimulationConfig () {
        description  = 'Sets the configuration directory to use in simulation and simulates the robot code'
    }

    @Option(option = 'configDir', description = 'Set the directory of the preferences/robot configuration.')
    void setConfigDir(final String dir) {
        configDir = project.file(dir)
    }

    @TaskAction
    def writeDirToFile() {
        if (!List.of(configDir.list()).contains('Preferences.json')) {
            throw new IllegalArgumentException('No preferences file in directory: ' + configDir)
        }
        
        File simPrefsPathFile = project.file('simulation/configDir.txt')
        if (!simPrefsPathFile.exists()) {
            if (!simPrefsPathFile.getParentFile().exists()) {
                simPrefsPathFile.getParentFile().mkdirs()
            }
            simPrefsPathFile.createNewFile()
        } else {
            simPrefsPathFile.text = ''
        }

        simPrefsPathFile << configDir
    }
}

tasks.register('simulate', SetSimulationConfig) {
    finalizedBy simulateJava
}

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

compileJava.dependsOn(createVersionFile)
gversion {
  srcDir       = "src/main/java/"
  classPackage = "frc4488.robot"
  className    = "BuildConstants"
  dateFormat   = "yyyy-MM-dd HH:mm:ss z"
  timeZone     = "PST" // Use preferred time zone
  indent       = "  "
}

task flipPaths(type: JavaExec) {
    group = "Execution"
    description = "Flip Path Planner paths to the red alliance"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "frc4488.lib.autonomous.PathPlannerUtil\$FlipPathsTask"
}
jar.dependsOn(flipPaths)